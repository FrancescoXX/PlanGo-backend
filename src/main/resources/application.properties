#Set server port. default is 8080
server.port=8084

# Disable security for actuator endpoints
management.security.enabled=false
# Disable sensitive filter for the health endpoint
endpoints.health.sensitive=false
#DB
# DataSource settings: set here your own configurations for the database
# connection. In this example we have "security-jpa" as database name and
# "root" as username and password.
spring.datasource.url=jdbc:mysql://localhost:3306/security-jpa?verifyServerCertificate=false&useSSL=false&requireSSL=false
spring.datasource.username=root
spring.datasource.password=root
# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle=true
#spring.datasource.validationQuery=SELECT 1
# Show or not log for each sql query
spring.jpa.show-sql=true
#switches the feature on and off and is vendor independent.
spring.jpa.generate-ddl=true
#Hibernate feature that controls the behavior in a more fine-grained way.
#validate: validate the schema, makes no changes to the database.
#updateDaytrip: updateDaytrip the schema.
#create: creates the schema, destroying previous data.
#create-drop: drop the schema at the end of the session
spring.jpa.hibernate.ddl-auto=update
# Naming strategy. OLD
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect